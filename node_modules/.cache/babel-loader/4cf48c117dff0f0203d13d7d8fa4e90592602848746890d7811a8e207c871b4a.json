{"ast":null,"code":"import _toConsumableArray from\"/workspaces/react_lightsout/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/workspaces/react_lightsout/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from\"react\";import Cell from\"./Cell\";import\"./Board.css\";/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/import{jsx as _jsx}from\"react/jsx-runtime\";function Board(_ref){var _ref$nrows=_ref.nrows,nrows=_ref$nrows===void 0?5:_ref$nrows,_ref$ncols=_ref.ncols,ncols=_ref$ncols===void 0?5:_ref$ncols,_ref$chanceLightStart=_ref.chanceLightStartsOn,chanceLightStartsOn=_ref$chanceLightStart===void 0?0.25:_ref$chanceLightStart;var _useState=useState(createBoard),_useState2=_slicedToArray(_useState,2),board=_useState2[0],setBoard=_useState2[1];/** create a board nrows high/ncols wide, each cell randomly lit or unlit */function createBoard(){return Array.from({length:nrows}).map(function(row){return Array.from({length:ncols}).map(function(cell){return Math.random()<chanceLightStartsOn;});});}/** Check if the player has won */function hasWon(){return board.every(function(row){return row.every(function(cell){return!cell;});});}/** Flip cells around a given cell */function flipCellsAround(coord){setBoard(function(oldBoard){var _coord$split$map=coord.split(\"-\").map(Number),_coord$split$map2=_slicedToArray(_coord$split$map,2),y=_coord$split$map2[0],x=_coord$split$map2[1];var flipCell=function flipCell(y,x,boardCopy){// if this coord is actually on board, flip it\nif(x>=0&&x<ncols&&y>=0&&y<nrows){boardCopy[y][x]=!boardCopy[y][x];}};var boardCopy=oldBoard.map(function(row){return _toConsumableArray(row);});flipCell(y,x,boardCopy);flipCell(y,x-1,boardCopy);flipCell(y,x+1,boardCopy);flipCell(y-1,x,boardCopy);flipCell(y+1,x,boardCopy);return boardCopy;});}// if the game is won, just show a winning msg & render nothing else\nif(hasWon()){return/*#__PURE__*/_jsx(\"div\",{children:\"You Win!\"});}// make table board: rows of Cell components\nvar tblBoard=[];for(var y=0;y<nrows;y++){var row=[];var _loop=function _loop(){var coord=\"\".concat(y,\"-\").concat(x);row.push(/*#__PURE__*/_jsx(Cell,{isLit:board[y][x],flipCellsAroundMe:function flipCellsAroundMe(evt){return flipCellsAround(coord);}},coord));};for(var x=0;x<ncols;x++){_loop();}tblBoard.push(/*#__PURE__*/_jsx(\"tr\",{children:row},y));}return/*#__PURE__*/_jsx(\"table\",{className:\"Board\",children:/*#__PURE__*/_jsx(\"tbody\",{children:tblBoard})});}export default Board;","map":{"version":3,"names":["React","useState","Cell","jsx","_jsx","Board","_ref","_ref$nrows","nrows","_ref$ncols","ncols","_ref$chanceLightStart","chanceLightStartsOn","_useState","createBoard","_useState2","_slicedToArray","board","setBoard","Array","from","length","map","row","cell","Math","random","hasWon","every","flipCellsAround","coord","oldBoard","_coord$split$map","split","Number","_coord$split$map2","y","x","flipCell","boardCopy","_toConsumableArray","children","tblBoard","_loop","concat","push","isLit","flipCellsAroundMe","evt","className"],"sources":["/workspaces/react_lightsout/src/Board.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({nrows = 5, ncols = 5, chanceLightStartsOn = 0.25}) {\n  const [board, setBoard] = useState(createBoard);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    return Array.from({length: nrows}).map(\n        row => Array.from({length: ncols}).map(\n            cell => Math.random() < chanceLightStartsOn\n        )\n    );\n  }\n\n  /** Check if the player has won */\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  /** Flip cells around a given cell */\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div>You Win!</div>;\n  }\n\n  // make table board: rows of Cell components\n\n  let tblBoard = [];\n\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n          <Cell\n              key={coord}\n              isLit={board[y][x]}\n              flipCellsAroundMe={evt => flipCellsAround(coord)}\n          />,\n      );\n    }\n    tblBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n      <table className=\"Board\">\n        <tbody>{tblBoard}</tbody>\n      </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}